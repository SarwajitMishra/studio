rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role safely.
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    // ROLES: A user can read their own role. Admins can read any role.
    match /roles/{userId} {
      allow get: if request.auth.uid == userId || isAdmin();
      // Only admins should be able to list roles, but let's disable for now.
      allow list, write: if false; 
    }

    // USERNAMES: Publicly readable for checks, but only writable during user creation.
    match /usernames/{username} {
      allow get: if true;
      allow create: if request.auth.uid == request.resource.data.uid;
      allow list, update, delete: if false;
    }

    // USERS:
    match /users/{userId} {
      allow list: if isAdmin();
      allow get: if request.auth.uid == userId || isAdmin();
      allow write: if request.auth.uid == userId;
    }
    
    // BLOGS:
    match /blogs/{blogId} {
      // READ (get and list): Anyone can read published posts. Authors/Admins can read non-published posts.
      allow read: if resource.data.status == 'published' || (request.auth != null && (request.auth.uid == resource.data.authorId || isAdmin()));

      // CREATE: Any authenticated user can create a blog post.
      allow create: if request.auth != null;

      // UPDATE/DELETE: Admins can manage any post. Authors can manage their own drafts.
      allow update, delete: if request.auth != null && 
                               (isAdmin() || (request.auth.uid == resource.data.authorId && resource.data.status == 'draft'));
    }
    
    // SESSIONS: Authenticated users can create, read, and update. Host can delete.
    match /sessions/{sessionId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.hostUid;
      allow read, update: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.hostUid;
    }
  }
}
