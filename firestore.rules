
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to safely check for admin role.
    // It verifies the user is authenticated, the role document exists,
    // and the isAdmin flag is true. This prevents errors on non-existent docs.
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/roles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    match /blogs/{blogId} {
      // Rule 1: Allow anyone to read published blog posts.
      allow read: if resource.data.status == 'published';

      // Rule 2: Allow authenticated users to create their own 'pending' posts.
      // This is the key rule for user submissions.
      allow create: if request.auth != null &&
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.status == 'pending' &&
                       // Ensure the publishedAt field is null on creation
                       request.resource.data.publishedAt == null;

      // Rule 3: Allow admins to perform any write operation.
      // This covers creating published posts, updating status, and deleting.
      allow write: if isAdmin();
    }

    match /users/{userId} {
      // Rule 4: A user can read/write their own profile. Admins can read any.
      allow read: if (request.auth != null && request.auth.uid == userId) || isAdmin();
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /usernames/{username} {
      // Rule 5: Only allow creation of a username document; prevent changes.
      // This is used to ensure usernames are unique.
      allow read, update, delete: if false;
      allow create: if true;
    }

    match /roles/{userId} {
      // Rule 6: FIX - Allow a user to read THEIR OWN role document.
      // This is crucial to break the recursive loop in the isAdmin() check.
      // Admins can also read any role document.
      allow get: if (request.auth != null && request.auth.uid == userId) || isAdmin();

      // Rule 7: Prevent clients from listing or writing roles.
      allow list, create, update, delete: if false;
    }

     match /sessions/{sessionId} {
      // Rule 8: Authenticated users can read/write sessions.
      allow read, write: if request.auth != null;
    }
  }
}
