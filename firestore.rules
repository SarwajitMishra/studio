
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      // Safely checks if a user is an admin.
      return request.auth != null &&
             exists(/databases/$(database)/documents/roles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    match /blogs/{blogId} {
      // Admins have full access.
      allow read, write: if isAdmin();
      
      // Non-admins can read published blogs.
      allow read: if resource.data.status == 'published';

      // Any authenticated user can create a PENDING post for themselves.
      allow create: if request.auth != null &&
                      request.resource.data.authorId == request.auth.uid &&
                      request.resource.data.status == 'pending';
    }
    
    match /users/{userId} {
      // A user can read/write their own profile. Admins can access any.
      allow read, write: if (request.auth != null && request.auth.uid == userId) || isAdmin();
    }
    
    match /roles/{userId} {
      // A user can read their own role document to allow the isAdmin() check to function.
      // Admins can also read any role document.
      allow get: if (request.auth != null && request.auth.uid == userId) || isAdmin();
      
      // No one can list all roles, or create/modify/delete them from the client.
      allow list, create, update, delete: if false;
    }

    match /sessions/{sessionId} {
      // Allow any authenticated user to create a session document.
      allow create: if request.auth != null;
      // Allow any authenticated user to read or join (update) a session.
      // More specific rules (like checking for game state) could be added here.
      allow read, update: if request.auth != null;
    }
  }
}
