
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Roles can be read by the owner or an admin. Only admins can write.
    match /roles/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true);
      allow write: if request.auth != null && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    // Usernames can be read by anyone (for uniqueness checks) but only created by the owner.
    match /usernames/{username} {
      allow read;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
    }

    // Users can manage their own profile. Admins can read/list all profiles.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true);
      allow write: if request.auth != null && request.auth.uid == userId;
      allow list: if request.auth != null && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;

      // User subcollections (e.g., game stats) are private to the user.
      match /{subcollection}/{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Blog posts have granular permissions based on status and user role.
    match /blogs/{blogId} {
      // READ (get a single doc): Anyone can read published posts. Authors and admins can read any of their posts.
      allow get: if resource.data.status == 'published'
                  || (request.auth != null && request.auth.uid == resource.data.authorId)
                  || (request.auth != null && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true);

      // LIST (query docs): Admins can list anything. Others can only list documents where the status is 'published'.
      // This rule works because our public queries in the code specifically ask for published posts.
      allow list: if (request.query.resource.data.status == 'published')
                   || (request.auth != null && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true);

      // CREATE: Authenticated users can create posts, and they must be the author.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;

      // UPDATE/DELETE: Authors can edit their own posts. Admins can edit any post.
      allow update, delete: if request.auth != null && (request.auth.uid == resource.data.authorId || get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Online game sessions can be created, read, and joined by any authenticated user.
    match /sessions/{sessionId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.hostUid;
      allow read: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null && resource.data.hostUid == request.auth.uid;
    }
  }
}
