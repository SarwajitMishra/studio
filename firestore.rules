
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      // Use exists() to safely check for the role document without causing an error if it's missing.
      return isAuth() && 
             exists(/databases/$(database)/documents/roles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    match /blogs/{blogId} {
      // Admins have full read/write access. This rule is checked first.
      allow read, write: if isAdmin();
      
      // Allow anyone to read published blogs.
      allow read: if resource.data.status == 'published';

      // Allow any logged-in user to create a PENDING blog post for themselves.
      // This is the key fix: It's simple and doesn't rely on complex key checks.
      allow create: if isAuth() &&
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.status == 'pending';
    }
    
    match /users/{userId} {
      // A user can read/write their own profile. Admins can access any.
      allow read, write: if (isAuth() && request.auth.uid == userId) || isAdmin();
    }
    
    match /usernames/{username} {
        // Anyone can check if a username exists.
        allow get: if true;
        // Only the backend (via a transaction) can create a username doc.
        // Users cannot create/update/delete them directly.
        allow list, create, update, delete: if false;
    }

    match /roles/{userId} {
      // A user can read their own role document. This is crucial to prevent the isAdmin() check from failing.
      allow get: if (isAuth() && request.auth.uid == userId) || isAdmin();
      
      // Nobody can list, create, update, or delete roles from the client.
      allow list, create, update, delete: if false;
    }

    match /sessions/{sessionId} {
      // Any authenticated user can create or join a session.
      allow read, write: if isAuth();
    }
  }
}
