rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isUserAuthenticated() {
      return request.auth != null;
    }

    // Helper function to safely check if the requesting user is an admin.
    // This depends on a separate, non-recursive rule allowing users to read their own role doc.
    function isAdmin() {
      return isUserAuthenticated() &&
             exists(/databases/$(database)/documents/roles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    // --- BLOGS COLLECTION ---
    match /blogs/{blogId} {
      // Anyone can read a published blog post.
      allow read: if resource.data.status == 'published';

      // Admins can do anything to any blog post.
      // NOTE: This single 'allow write' covers create, update, and delete.
      allow write: if isAdmin();

      // Logged-in users can create their own 'pending' posts.
      // This is checked if the 'allow write: if isAdmin()' rule fails.
      allow create: if isUserAuthenticated() &&
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.status == 'pending';

      // A user can update their own post ONLY IF it is still a 'pending' draft.
      // They cannot publish their own post.
      allow update: if isUserAuthenticated() &&
                       request.resource.data.authorId == request.auth.uid &&
                       resource.data.status == 'pending';
    }

    // --- USERS COLLECTION (public profiles) ---
    match /users/{userId} {
      // Any authenticated user can read any other user's public profile.
      allow read: if isUserAuthenticated();

      // A user can create and update their own profile.
      allow create, update: if isUserAuthenticated() && request.auth.uid == userId;
    }
    
    // --- USERNAMES COLLECTION (for unique username checks) ---
    match /usernames/{username} {
      // Anyone can check if a username exists.
      allow get: if true;
      
      // A user can only create their own username entry, preventing spoofing.
      allow create: if isUserAuthenticated() && request.resource.data.uid == request.auth.uid;

      // No one can modify or delete username entries from the client for security.
      allow update, delete: if false;
    }

    // --- ROLES COLLECTION (admin checks) ---
    match /roles/{userId} {
      // THIS IS THE KEY FIX:
      // A user can read their OWN role document. This is NOT recursive.
      // This allows the isAdmin() function to work for everyone without failing.
      allow get: if isUserAuthenticated() && request.auth.uid == userId;

      // Admins can list all roles (e.g., for an admin panel).
      allow list: if isAdmin();
      
      // Nobody can write roles from the client. This must be done server-side or in the console.
      allow write: if false;
    }

    // --- SESSIONS COLLECTION (for online multiplayer) ---
    match /sessions/{sessionId} {
      // Any authenticated user can read, create, and update sessions for now.
      // You might want to make this more specific later (e.g., only participants can update).
      allow read, write: if isUserAuthenticated();
    }
  }
}
