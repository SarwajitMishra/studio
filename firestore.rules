
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions for Readability ---
    function isAdmin() {
      return request.auth != null && (request.auth.token.admin == true || request.auth.token.superAdmin == true);
    }
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isBlogOwner(blog) {
      return request.auth.uid == blog.data.authorId;
    }


    // --- Collection-Specific Rules ---

    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId) || isAdmin();
    }

    match /forum-topics/{topicId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if resource.data.authorId == request.auth.uid || isAdmin();
      
      match /replies/{replyId} {
        allow read: if true;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if resource.data.authorId == request.auth.uid || isAdmin();
      }
    }
    
    match /gallery-creations/{creationId} {
      allow read: if isAdmin() || resource.data.published == true || (isOwner(resource.data.authorId) && isSignedIn());
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid && request.resource.data.published == false;
      allow update: if isAdmin();
    }

    match /knowledge-base-articles/{articleId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    match /gameLevels/{levelId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /userScores/{userId} {
        allow read: if isOwner(userId) || isAdmin();
        allow write: if isOwner(userId);
    }

    // --- CORRECTED: BLOGS Collection (for Playhouse App ONLY) ---
    match /blogs/{blogId} {

      // LIST: Anyone can perform queries. The 'read' rule below is what secures the results.
      allow list: if true;

      // READ: Anyone can read a 'published' blog. An author can read their own blog, regardless of its status.
      allow read: if resource.data.status == 'published' || 
                   (isSignedIn() && isBlogOwner(resource));

      // CREATE: An authenticated user can create a blog if the authorId matches their UID
      // and the initial status is valid ('draft' or 'pending-review').
      allow create: if isSignedIn() &&
                     request.resource.data.authorId == request.auth.uid &&
                     (request.resource.data.status == 'draft' || request.resource.data.status == 'pending-review');

      // UPDATE: Only the author of the blog post can update it.
      allow update: if isSignedIn() && isBlogOwner(request.resource);

      // DELETE: Only the author can delete their own post, and only if it's a draft.
      allow delete: if isSignedIn() && isBlogOwner(resource) && resource.data.status == 'draft';
    }

  }
}
