rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow anyone to create a document in the 'visitors' collection.
    // This lets the visitor counter work.
    // Deny updates or deletes to prevent tampering.
    match /visitors/{visitorId} {
      allow create, read: if true;
      allow update, delete: if false;
    }
    
    // Allow users to read and update their own profile.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Allow admins to read any user profile.
      allow get: if request.auth != null && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Allow admins to list all users.
    match /users/{userId} {
        allow list: if request.auth != null && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    // Allow users to read their own role, but only admins can write roles.
    match /roles/{userId} {
      allow get: if request.auth != null && request.auth.uid == userId;
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Allow any authenticated user to create pending blog posts.
    // Allow anyone to read published posts.
    match /blogs/{blogId} {
        allow read: if resource.data.status == 'published';
        allow create: if request.auth != null && request.resource.data.status == 'pending';
        // Allow author to update/delete their own drafts/pending posts
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId && (resource.data.status == 'draft' || resource.data.status == 'pending');
        // Allow admins to manage any post
        allow get, list, update, delete: if request.auth != null && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    // Allow admins to read the usernames collection for validation.
    match /usernames/{username} {
        allow get: if request.auth != null && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
        // Allow users to create their own username entry.
        allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
    }
    
     // Allow admins to manage sessions, and authenticated users to interact with them.
    match /sessions/{sessionId} {
      allow read, create, update: if request.auth != null;
    }
    
    match /sessions/{sessionId}/messages/{messageId} {
        allow read, create: if request.auth != null;
    }
  }
}
