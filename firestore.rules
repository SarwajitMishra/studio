
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to safely check for admin role.
    // It checks if the role document exists before trying to access its data.
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    match /blogs/{blogId} {
      // Anyone can read published blog posts.
      allow read: if resource.data.status == 'published';

      // Logged-in users can create posts, but ONLY if they are the author and the status is 'pending'.
      allow create: if request.auth != null &&
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.status == 'pending';

      // Authors can update their own pending posts.
      allow update: if request.auth != null &&
                       request.auth.uid == resource.data.authorId &&
                       resource.data.status == 'pending';

      // Admins can perform any write operation (create, update, delete).
      // This rule is separate and provides broader permissions for admins.
      allow write: if isAdmin();
    }

    match /roles/{userId} {
      // Admins can read and write any role document.
      allow read, write: if isAdmin();
      
      // A user can read their own role document (if it exists).
      allow get: if request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId} {
      // Anyone can read user profiles.
      allow read: if true;
      // Users can only update their own profile.
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    match /usernames/{username} {
      // Allow creation only if the user is creating their own username mapping.
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      // No one can read, update, or delete username docs after creation to protect user data.
      allow read, update, delete: if false;
    }
  }
}
