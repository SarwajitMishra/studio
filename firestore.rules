rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to safely check if a user is an admin.
    // It checks for the existence of the role document before trying to read its data.
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/roles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    match /blogs/{blogId} {
      // READ: Anyone can read published blogs. Admins can read any blog regardless of status.
      allow read: if resource.data.status == 'published' || isAdmin();

      // CREATE:
      // 1. Any authenticated user can create a blog if they are the author and the status is 'pending'.
      // 2. Admins can create blogs with any status (e.g., publish directly).
      allow create: if (request.auth != null &&
                        request.resource.data.authorId == request.auth.uid &&
                        request.resource.data.status == 'pending')
                     || isAdmin();

      // UPDATE / DELETE: Only admins can update or delete blogs.
      allow update, delete: if isAdmin();
    }

    match /users/{userId} {
      // A user can read/write their own profile. Admins can read/write any profile.
      allow read, write: if (request.auth != null && request.auth.uid == userId) || isAdmin();
    }

    match /usernames/{username} {
      // Allow client to check for username uniqueness.
      allow read;
      // Disallow client from writing directly. This must be done in a transaction/backend.
      allow write: if false;
    }

    match /roles/{userId} {
      // Only admins can see who has roles.
      // The get() call in the isAdmin() function bypasses this rule check for a user checking their own role.
      allow read: if isAdmin();
      
      // Roles must be assigned from a trusted environment (e.g., Firebase Console or a backend function).
      allow write: if false;
    }
  }
}
