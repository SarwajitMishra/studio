rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // By default, deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Helper function to check for admin role
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    // Blogs Collection Rules
    match /blogs/{blogId} {
      // READ: Anyone can read published blogs. Admins can read any blog.
      allow read: if resource.data.status == 'published' || isAdmin();

      // CREATE: An authenticated user can create a 'pending' post for themselves, OR an admin can create any post.
      allow create: if (request.auth != null && 
                        request.resource.data.authorId == request.auth.uid &&
                        request.resource.data.status == 'pending')
                     || isAdmin();
      
      // UPDATE & DELETE: Only admins can update or delete posts.
      allow update, delete: if isAdmin();
    }
    
    // Roles Collection Rules
    match /roles/{userId} {
      // A user can read their own role document (important for the isAdmin() check to work for everyone).
      // Admins can read any role document.
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      
      // WRITE: Only admins can write to the roles collection.
      allow write: if isAdmin();
    }

    // Users Collection Rules
    match /users/{userId} {
      // A user can read/update their own profile. Admins can read any profile.
      allow read, update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // Admins can list all users for the admin panel.
      allow list: if isAdmin();
      // CREATE is handled by a secure transaction in the backend.
    }

    // Usernames Collection Rules
    match /usernames/{username} {
        // Anyone can check if a username exists during signup.
        allow read: if true;
        // Only an authenticated user can claim their own username during signup.
        allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
    }
  }
}
