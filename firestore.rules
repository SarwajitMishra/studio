rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function to check if the requesting user is an admin.
    // get() does not re-evaluate rules, making this a safe check.
    function isAdmin() {
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    match /blogs/{blogId} {
      // READ: Anyone can read published posts. Admins can read any post for management.
      allow read: if resource.data.status == 'published' || (request.auth != null && isAdmin());

      // CREATE: Users must be logged in and the author. Status depends on role.
      allow create: if request.auth.uid == request.resource.data.authorId &&
                      (
                        // Normal users can ONLY create 'pending' posts.
                        request.resource.data.status == 'pending' ||
                        // Admins can create 'published' posts directly.
                        (request.resource.data.status == 'published' && isAdmin())
                      );
                       
      // UPDATE & DELETE: Only admins can perform these actions (e.g., to publish a post).
      allow update, delete: if request.auth != null && isAdmin();
    }
    
    match /roles/{userId} {
      // Admins can manage roles. Users can read their own role document.
      allow read: if request.auth.uid == userId || (request.auth != null && isAdmin());
      allow write: if request.auth != null && isAdmin();
    }

    match /users/{userId} {
      // Users can read and write their own profile. Admins can list all users.
      allow read, update: if request.auth.uid == userId;
      allow list: if request.auth != null && isAdmin();
    }

    match /usernames/{username} {
      // Allow reading for uniqueness checks during signup.
      allow read: if request.auth != null;
      // Writes are handled by secure backend/transaction logic, not direct client writes.
      allow write: if false; 
    }

    match /sessions/{sessionId} {
      // Logged-in users can see session details.
      allow read: if request.auth != null;
      // The host is the one who can create the session.
      allow create: if request.auth.uid == request.resource.data.hostUid;
      // Any logged-in user can join (update) a session. More specific rules can be added here.
      allow update: if request.auth != null;
    }
  }
}
