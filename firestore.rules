rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // Allow user to read their OWN role document. This breaks the recursive loop.
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId} {
      // Admins can see all user profiles
      allow list, get: if isAdmin();
      // Users can only see/edit their own profile
      allow get, update: if request.auth.uid == userId;
    }

    match /usernames/{username} {
      // Only authenticated users can check for usernames (to prevent anonymous spam)
      allow get: if request.auth != null;
      // Creation is handled by the 'createUserProfile' transaction rule
      allow create: if false;
    }

    match /roles/{userId} {
        // A user can read their own role to facilitate the isAdmin() check for themselves.
        // Admins can read anyone's role.
        allow get: if request.auth.uid == userId || isAdmin();
    }

    match /blogs/{blogId} {
      // Anyone can read a published blog post
      allow get, list: if resource.data.status == 'published';

      // Allow any authenticated user to create a 'pending' post.
      // This rule is now very strict to ensure data integrity.
      allow create: if request.auth != null &&
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.keys().hasAll(['title', 'content', 'slug', 'authorId', 'authorName', 'authorAvatar', 'status', 'createdAt', 'publishedAt']) &&
                       request.resource.data.size() == 9;

      // Allow admins to update/delete any post.
      // Users cannot update/delete their own posts directly.
      allow update, delete: if isAdmin();
    }
    
    match /sessions/{sessionId} {
      // Allow any authenticated user to read/write to sessions for multiplayer functionality.
      allow read, write: if request.auth != null;
    }
  }
}
