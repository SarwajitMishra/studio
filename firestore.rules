
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // Safely checks if the currently authenticated user has the 'isAdmin' role.
    // This is the key change: it uses `exists()` before `get()` to prevent errors.
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/roles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    // --- Collection Rules ---

    // Blogs Collection
    match /blogs/{blogId} {
      // Rule 1: Anyone can read a post that has been published.
      allow read: if resource.data.status == 'published';

      // Rule 2: Any logged-in user can create a new post, but ONLY if its
      // status is 'pending' and they are the author.
      allow create: if request.auth != null &&
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.status == 'pending';
                       
      // Rule 3: Only an admin can update or delete any blog post.
      // This covers publishing, rejecting, or editing.
      allow update, delete: if isAdmin();
    }

    // User Profiles Collection
    match /users/{userId} {
      // Rule 1: A user can read/write to their own profile.
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Rule 2: An admin can read any user's profile.
      allow get, list: if isAdmin();
    }

    // Usernames Collection (for ensuring unique usernames)
    match /usernames/{username} {
      // Rule 1: No one can read the list of all usernames.
      allow list, get: if false;

      // Rule 2: A user can create their own username document during signup,
      // but cannot change or delete it later.
      allow create: if request.auth != null &&
                       request.resource.data.uid == request.auth.uid;
      allow update, delete: if false;
    }

    // Roles Collection (for admin checks)
    match /roles/{userId} {
      // THIS IS THE FIX: A user can read their OWN role document.
      // This allows the isAdmin() function to work for everyone without failing.
      allow get: if request.auth != null && request.auth.uid == userId;

      // Only admins can see other people's roles.
      allow list: if isAdmin();

      // No one can write to the roles collection from the client.
      allow create, update, delete: if false;
    }
    
    // Online Sessions Collection
    match /sessions/{sessionId} {
      // Any authenticated user can read or join a session.
      allow read, update: if request.auth != null;
      // Any authenticated user can create a new session.
      allow create: if request.auth != null;
    }
  }
}
