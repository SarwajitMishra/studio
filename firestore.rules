
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to safely check for admin status
    function isAdmin() {
      // The user must be authenticated.
      // Their role document must exist.
      // The isAdmin field in their role document must be true.
      return request.auth != null && 
             exists(/databases/$(database)/documents/roles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    match /blogs/{blogId} {
      // Admins can perform any action on any blog post.
      allow read, write: if isAdmin();

      // For non-admins:
      // Allow reading of any blog post that has the status 'published'.
      allow read: if resource.data.status == 'published';

      // Allow authenticated users to create a 'pending' post for themselves.
      allow create: if request.auth != null &&
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.status == 'pending';
    }

    match /users/{userId} {
      // Admins can read/write any user profile.
      // Users can read/write their own profile.
      allow read, write: if (request.auth != null && request.auth.uid == userId) || isAdmin();
    }
    
    match /usernames/{username} {
      // Anyone can check if a username exists (read).
      allow read: if true;
      // Only the corresponding user can create their username document during signup.
      // Admins can also create/delete them for maintenance.
      allow create: if (request.auth != null && request.resource.data.uid == request.auth.uid) || isAdmin();
      allow write: if isAdmin();
    }

    match /roles/{userId} {
      // A user can ONLY read their OWN role document. This is required for the 
      // isAdmin() function to work for everyone without causing a recursive error.
      allow get: if request.auth != null && request.auth.uid == userId;

      // No client can list, create, update, or delete roles. This must be done securely.
      allow list, create, update, delete: if false;
    }
    
    match /sessions/{sessionId} {
      // Anyone authenticated can read a session to see who is in it.
      allow read: if request.auth != null;
      // Only an authenticated user can create a session.
      allow create: if request.auth != null && request.resource.data.hostUid == request.auth.uid;
      // Participants and the host can update the session (e.g., change status, add participants).
      allow update: if request.auth != null && (request.resource.data.hostUid == request.auth.uid || request.auth.uid in resource.data.participants.map(p => p.uid));
    }
  }
}
