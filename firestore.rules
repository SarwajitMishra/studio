rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/roles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    match /blogs/{blogId} {
      // Admins have full read/write access. This rule is checked first.
      allow read, write: if isAdmin();

      // Below rules apply to non-admins
      
      // Allow reading a single document if it's published.
      // This rule also implicitly secures list queries: any query will only return documents
      // for which this `get` rule is true.
      allow get: if resource.data.status == 'published';

      // Allow creating a document if the user is authenticated, the author ID matches their UID,
      // and the status is 'pending'. This prevents users from creating posts for others or publishing directly.
      allow create: if request.auth != null &&
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.status == 'pending';
    }
    
    match /users/{userId} {
      // A user can read/write their own profile. Admins can access any.
      allow read, write: if (request.auth != null && request.auth.uid == userId) || isAdmin();
    }
    
    match /roles/{userId} {
      // Only admins can see who has roles. Clients cannot write roles.
      allow get: if isAdmin();
      allow list, create, update, delete: if false;
    }
  }
}
