
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only read their own profile, but anyone can create one.
    // Admins can read all user profiles.
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId
                  || (get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true);
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == userId;
    }
    
    // Usernames can only be created, not updated or deleted, to ensure uniqueness.
    // This is part of a transaction in the createUserProfile function.
    match /usernames/{username} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    // Admins have their role defined in a 'roles' collection.
    // Only other admins can read or write roles (for security).
    match /roles/{userId} {
      allow read, write: if get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Blog posts can only be read if they are 'published'.
    // Authenticated users can create 'pending' or 'draft' posts.
    // Admins can manage all blog posts.
    match /blogs/{blogId} {
      allow read: if resource.data.status == 'published'
                  || (request.auth != null && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true);
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
                      (resource.data.authorId == request.auth.uid && request.resource.data.authorId == resource.data.authorId)
                      || get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true
                    );
    }
    
    // SESSIONS (for multiplayer/chat)
    match /sessions/{sessionId} {
      // Anyone authenticated can create a session.
      allow create: if request.auth != null;
      
      // Only participants of the session can read or update it (e.g., join).
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participants.map(p => p.uid);

      // --- CHAT MESSAGES SUBCOLLECTION ---
      match /messages/{messageId} {
        // Anyone in the session can read all messages.
        allow read: if request.auth != null && get(/databases/$(database)/documents/sessions/$(sessionId)).data.participants.map(p => p.uid).hasAny([request.auth.uid]);
        
        // You can only create a message if you are in the session, and you are the author of the message.
        allow create: if request.auth != null && get(/databases/$(database)/documents/sessions/$(sessionId)).data.participants.map(p => p.uid).hasAny([request.auth.uid])
                       && request.resource.data.uid == request.auth.uid;
                       
        // Messages are immutable.
        allow update, delete: if false;
      }
    }
  }
}
