
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- User Data Rules ---
    // User profiles can be read by anyone, but only the user can write to their own profile.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth.uid == userId;
    }
    
    // Usernames must be unique. Documents in this collection are just for uniqueness checks.
    // Only authenticated users can create their own username doc. No one can update or delete.
    match /usernames/{username} {
       allow read: if true;
       allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
       allow update, delete: if false;
    }
    
    // User roles can only be read and written by admins.
    match /roles/{userId} {
      allow read, write: if get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // User-specific subcollections (e.g., gameStats, rewardHistory) are private.
    match /users/{userId}/{collection}/{docId} {
      allow read, write: if request.auth.uid == userId;
    }

    // --- Online Session Rules ---
    // Allow authenticated users to create sessions.
    match /sessions/{sessionId} {
      allow read: if request.auth != null;
      // CREATE: any authenticated user can create.
      // UPDATE: only a logged-in user who is a participant can update the session
      // (e.g., to add themselves).
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid in resource.data.participants;
      // DELETE: only the host can delete a session.
      allow delete: if request.auth.uid == resource.data.hostUid;
    }

    // --- Session Chat Rules ---
    // Only participants of a session can read or write messages in it.
    match /sessions/{sessionId}/messages/{messageId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/sessions/$(sessionId)).data.participants.exists(p => p.uid == request.auth.uid);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid && get(/databases/$(database)/documents/sessions/$(sessionId)).data.participants.exists(p => p.uid == request.auth.uid);
      allow update, delete: if false; // Messages are immutable
    }

  }
}
