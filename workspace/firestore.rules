
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Allow read-only access to a user's own profile.
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      // Creation is handled by a backend function or a more complex rule.
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    // Allow creation of a username document only if the user is authenticated and the doc doesn't exist.
    match /usernames/{username} {
      allow read: if true;
      allow create: if request.auth != null && !exists(path);
    }

    // Allow admins to read/write to the roles collection.
    match /roles/{userId} {
      allow read, write: if get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    // For user-specific subcollections like gameStats and rewardHistory
    match /users/{userId}/{collection}/{docId} {
      // Only the user themselves or an admin can access their own subcollections.
      allow read, write: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true);
    }

    // Rules for Online Sessions
    match /sessions/{sessionId} {
      // Anyone authenticated can read a session to see who is in it.
      allow read: if request.auth != null;
      // Anyone authenticated can create a new session document.
      allow create: if request.auth != null;
      // Only participants can update a session (e.g., to join it).
      allow update: if request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
    }

    // Rules for Session Chat (Future)
    match /sessions/{sessionId}/messages/{messageId} {
        // Anyone in the session can read messages.
        allow read: if request.auth != null && get(/databases/$(database)/documents/sessions/$(sessionId)).data.participants.hasAny([request.auth.uid]);
        // Only participants can write messages, and they must be the author of the message.
        allow create: if request.auth != null && get(/databases/$(database)/documents/sessions/$(sessionId)).data.participants.hasAny([request.auth.uid]) && request.resource.data.uid == request.auth.uid;
    }
  }
}
